{
  "openapi": "3.0.0",
  "info": {
    "title": "PenPals API",
    "version": "1.0.0",
    "description": "API documentation for PenPals. Use this API to send handwritten cards to any contact within the US. Requires a PenPals account.",
    "contact": {
      "name": "the developer",
      "email": "support@penpalsapp.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:5001",
      "description": "API Server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string"
              },
              "code": {
                "type": "string"
              },
              "details": {
                "type": "object"
              }
            }
          }
        }
      },
      "SuccessResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "data": {
            "type": "object"
          },
          "metadata": {
            "type": "object"
          }
        }
      },
      "address": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "business_name": {
            "type": "string",
            "nullable": true
          },
          "address_line1": {
            "type": "string"
          },
          "address_line2": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          },
          "country": {
            "type": "string",
            "default": "US"
          }
        }
      },
      "user": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "cart": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "product_id": {
                  "type": "string"
                },
                "quantity": {
                  "type": "integer"
                },
                "price": {
                  "type": "number"
                }
              }
            }
          },
          "total": {
            "type": "number"
          }
        }
      },
      "order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "total": {
            "type": "number"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "product_id": {
                  "type": "string"
                },
                "quantity": {
                  "type": "integer"
                },
                "price": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "image_url": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          }
        }
      },
      "messageTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "signature": {
            "type": "string",
            "nullable": true
          },
          "font": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "ink_color": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer"
              },
              "name": {
                "type": "string"
              },
              "hex_code": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "responses": {
      "ValidationError": {
        "description": "Invalid input data",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "UnauthorizedError": {
        "description": "Authentication required",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ForbiddenError": {
        "description": "Permission denied",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NotFoundError": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ServerError": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "TooManyRequestsError": {
        "description": "Rate limit exceeded",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ConflictError": {
        "description": "Request conflicts with current state",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "StandardResponse": {
        "description": "Standard response format for all API endpoints",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SuccessResponse"
                },
                {
                  "$ref": "#/components/schemas/Error"
                }
              ]
            }
          }
        }
      },
      "IdempotencyKeyInProgress": {
        "description": "Operation already in progress",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "MissingIdempotencyKey": {
        "description": "Missing idempotency key",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "InvalidIdempotencyKey": {
        "description": "Invalid idempotency key format",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "parameters": {
      "RequestId": {
        "name": "X-Request-ID",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "required": false,
        "description": "Unique request identifier for tracking purposes"
      },
      "CorrelationId": {
        "name": "X-Correlation-ID",
        "in": "header",
        "description": "Optional identifier for correlating multiple related requests in a transaction flow",
        "schema": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9\\-_]{8,64}$|^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
          "example": "e1d2c3b4-a5b6-7c8d-9e0f-1a2b3c4d5e6f"
        },
        "required": false
      },
      "IdempotencyKey": {
        "in": "header",
        "name": "Idempotency-Key",
        "required": true,
        "description": "Unique identifier to ensure request is processed only once",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "headers": {
      "RequestIdResponse": {
        "description": "Unique identifier for the request, either provided in the request or generated by the API",
        "schema": {
          "type": "string",
          "example": "9f8a7c6b-5e4d-3c2b-1a0f-9e8d7c6b5a4f"
        }
      },
      "X-RateLimit-Limit": {
        "description": "Maximum number of requests allowed in the current time window",
        "schema": {
          "type": "integer"
        }
      },
      "X-RateLimit-Remaining": {
        "description": "Number of requests remaining in the current time window",
        "schema": {
          "type": "integer"
        }
      },
      "X-RateLimit-Reset": {
        "description": "Time when the current rate limit window resets (Unix timestamp)",
        "schema": {
          "type": "integer"
        }
      },
      "Retry-After": {
        "description": "Seconds to wait before making another request",
        "schema": {
          "type": "integer"
        }
      }
    }
  },
  "paths": {
    "/api/v1/addresses": {
      "post": {
        "summary": "Create a new address",
        "description": "Create a new recipient address.",
        "tags": [
          "Addresses"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "write:addresses"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "first_name",
                  "last_name",
                  "address_line1",
                  "city",
                  "state",
                  "zip"
                ],
                "properties": {
                  "first_name": {
                    "type": "string"
                  },
                  "last_name": {
                    "type": "string"
                  },
                  "business_name": {
                    "type": "string"
                  },
                  "address_line1": {
                    "type": "string"
                  },
                  "address_line2": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "state": {
                    "type": "string"
                  },
                  "zip": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string",
                    "default": "US"
                  },
                  "label": {
                    "type": "string"
                  }
                }
              },
              "example": {
                "first_name": "John",
                "last_name": "Doe",
                "business_name": "ACME Corp",
                "address_line1": "123 Main St",
                "address_line2": "Suite 405",
                "city": "San Francisco",
                "state": "CA",
                "zip": "94105",
                "country": "US",
                "label": "Work Address"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Address created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Unique identifier for the newly created address"
                        },
                        "message": {
                          "type": "string",
                          "description": "Success message"
                        }
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "version": {
                          "type": "string"
                        },
                        "request_id": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "add_12345abcde",
                    "message": "Address created successfully"
                  },
                  "metadata": {
                    "timestamp": "2023-04-01T12:00:00Z",
                    "version": "v1",
                    "request_id": "req_abc123"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "Get all addresses",
        "description": "Retrieve a list of all addresses for the authenticated user. Results are paginated.",
        "tags": [
          "Addresses"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "read:addresses"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "address_book_id",
            "schema": {
              "type": "string"
            },
            "description": "Filter addresses by address book ID"
          },
          {
            "in": "query",
            "name": "include_books",
            "schema": {
              "type": "boolean"
            },
            "description": "Include address book information in response"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            },
            "description": "Maximum number of records to return per page"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination"
          }
        ],
        "responses": {
          "200": {
            "description": "List of addresses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/address"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/api/v1/addresses/bulk": {
      "post": {
        "summary": "Create multiple addresses",
        "description": "Create multiple recipient mailing addresses in a single request. Limited to 100 addresses per request.",
        "tags": [
          "Addresses"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "write:addresses"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "addresses"
                ],
                "properties": {
                  "addresses": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "first_name",
                        "last_name",
                        "address_line1",
                        "city",
                        "state",
                        "zip"
                      ],
                      "properties": {
                        "first_name": {
                          "type": "string"
                        },
                        "last_name": {
                          "type": "string"
                        },
                        "address_line1": {
                          "type": "string"
                        },
                        "address_line2": {
                          "type": "string"
                        },
                        "city": {
                          "type": "string"
                        },
                        "state": {
                          "type": "string"
                        },
                        "zip": {
                          "type": "string"
                        },
                        "country": {
                          "type": "string",
                          "default": "US"
                        }
                      }
                    }
                  }
                }
              },
              "example": {
                "addresses": [
                  {
                    "first_name": "John",
                    "last_name": "Doe",
                    "address_line1": "123 Main St",
                    "city": "San Francisco",
                    "state": "CA",
                    "zip": "94105"
                  },
                  {
                    "first_name": "Jane",
                    "last_name": "Smith",
                    "address_line1": "456 Market St",
                    "city": "San Francisco",
                    "state": "CA",
                    "zip": "94103"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Addresses created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "description": "Success message"
                        },
                        "ids": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "IDs of the created addresses"
                        }
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "version": {
                          "type": "string"
                        },
                        "request_id": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "success": true,
                  "data": {
                    "message": "2 addresses created successfully",
                    "ids": [
                      "add_12345abcde",
                      "add_67890fghij"
                    ]
                  },
                  "metadata": {
                    "timestamp": "2023-04-01T12:00:00Z",
                    "version": "v1",
                    "request_id": "req_abc123"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update multiple addresses",
        "description": "Update multiple recipient addresses in a single request. Limited to 100 addresses per request.",
        "tags": [
          "Addresses"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "write:addresses"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "updates"
                ],
                "properties": {
                  "updates": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "id",
                        "data"
                      ],
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "first_name": {
                              "type": "string"
                            },
                            "last_name": {
                              "type": "string"
                            },
                            "business_name": {
                              "type": "string"
                            },
                            "address_line1": {
                              "type": "string"
                            },
                            "address_line2": {
                              "type": "string"
                            },
                            "city": {
                              "type": "string"
                            },
                            "state": {
                              "type": "string"
                            },
                            "zip": {
                              "type": "string"
                            },
                            "country": {
                              "type": "string"
                            },
                            "label": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "example": {
                "updates": [
                  {
                    "id": "add_12345abcde",
                    "data": {
                      "first_name": "Jonathan",
                      "last_name": "Doe"
                    }
                  },
                  {
                    "id": "add_67890fghij",
                    "data": {
                      "address_line1": "789 New Address St",
                      "city": "New York",
                      "state": "NY",
                      "zip": "10001"
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Addresses updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string",
                          "description": "Success message"
                        },
                        "ids": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "description": "IDs of the updated addresses"
                        }
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "version": {
                          "type": "string"
                        },
                        "request_id": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "success": true,
                  "data": {
                    "message": "2 addresses updated successfully",
                    "ids": [
                      "add_12345abcde",
                      "add_67890fghij"
                    ]
                  },
                  "metadata": {
                    "timestamp": "2023-04-01T12:00:00Z",
                    "version": "v1",
                    "request_id": "req_abc123"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "One or more addresses not found"
          }
        }
      },
      "delete": {
        "summary": "Delete multiple addresses",
        "description": "Delete multiple recipient addresses in a single request. Limited to 100 addresses per request.",
        "tags": [
          "Addresses"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "write:addresses"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "ids"
                ],
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1,
                    "maxItems": 100
                  }
                }
              },
              "example": {
                "ids": [
                  "add_12345abcde",
                  "add_67890fghij"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Addresses deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "example": true
                        },
                        "message": {
                          "type": "string",
                          "description": "Success message"
                        }
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "version": {
                          "type": "string"
                        },
                        "request_id": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "success": true,
                  "data": {
                    "success": true,
                    "message": "2 addresses deleted successfully"
                  },
                  "metadata": {
                    "timestamp": "2023-04-01T12:00:00Z",
                    "version": "v1",
                    "request_id": "req_abc123"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "One or more addresses not found"
          }
        }
      }
    },
    "/api/v1/addresses/{id}": {
      "get": {
        "summary": "Get a single address",
        "description": "Retrieve a specific address by its ID",
        "tags": [
          "Addresses"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "read:addresses"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique address identifier"
          },
          {
            "in": "query",
            "name": "include_books",
            "schema": {
              "type": "boolean"
            },
            "description": "Include address book information in response"
          }
        ],
        "responses": {
          "200": {
            "description": "Address details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/address"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Address not found"
          }
        }
      },
      "patch": {
        "summary": "Update an address",
        "description": "Update a specific address. Note that when updating address fields (address_line1, city, state, zip) all fields must be provided together. Similarly, when updating name fields, both first_name and last_name must be provided.",
        "tags": [
          "Addresses"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "write:addresses"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique address identifier"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "first_name": {
                    "type": "string"
                  },
                  "last_name": {
                    "type": "string"
                  },
                  "business_name": {
                    "type": "string"
                  },
                  "address_line1": {
                    "type": "string"
                  },
                  "address_line2": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "state": {
                    "type": "string"
                  },
                  "zip": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string"
                  },
                  "label": {
                    "type": "string"
                  }
                }
              },
              "example": {
                "first_name": "Jonathan",
                "last_name": "Doe",
                "business_name": "Updated Corp"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Address updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/address"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Address not found"
          }
        }
      },
      "delete": {
        "summary": "Delete an address",
        "description": "Permanently delete an address. This action cannot be undone.",
        "tags": [
          "Addresses"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "write:addresses"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique address identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Address deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Address not found"
          }
        }
      }
    },
    "/api/v1/auth/authorize": {
      "get": {
        "summary": "OAuth 2.0 authorization endpoint",
        "description": "Initiates the authorization code flow by authenticating the user\nand requesting their consent to authorize the client application.\nUpon successful authorization, redirects to the client's redirect URI\nwith an authorization code.\n",
        "tags": [
          "Auth"
        ],
        "parameters": [
          {
            "name": "client_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The client identifier"
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The URI to redirect to after authorization"
          },
          {
            "name": "response_type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "code"
              ]
            },
            "description": "Must be \"code\" for authorization code flow"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Space-separated list of requested scopes"
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Value used to maintain state between the request and callback"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirects to login page or client redirect URI with code",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "description": "Redirect URL"
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Missing required parameter client_id"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "unauthorized_client"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "The client is not authorized to request an authorization code"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/token": {
      "post": {
        "summary": "Request an OAuth 2.0 token",
        "description": "Issues an access token using the specified grant type.\nSupports client_credentials, authorization_code, and refresh_token grant types.\n",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "grant_type",
                  "client_id"
                ],
                "properties": {
                  "grant_type": {
                    "type": "string",
                    "enum": [
                      "client_credentials",
                      "authorization_code",
                      "refresh_token"
                    ],
                    "description": "OAuth 2.0 grant type"
                  },
                  "client_id": {
                    "type": "string",
                    "description": "OAuth client ID"
                  },
                  "client_secret": {
                    "type": "string",
                    "description": "OAuth client secret - required for confidential clients"
                  },
                  "code": {
                    "type": "string",
                    "description": "Authorization code - required for authorization_code grant"
                  },
                  "redirect_uri": {
                    "type": "string",
                    "description": "Redirect URI - required for authorization_code grant"
                  },
                  "refresh_token": {
                    "type": "string",
                    "description": "Refresh token - required for refresh_token grant"
                  },
                  "scope": {
                    "type": "string",
                    "description": "Space-separated list of requested scopes"
                  }
                }
              },
              "example": {
                "grant_type": "client_credentials",
                "client_id": "client_123456",
                "client_secret": "[CLIENT_SECRET]",
                "scope": "read:profile write:orders"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token issued successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string",
                      "description": "The access token to be used for API requests"
                    },
                    "token_type": {
                      "type": "string",
                      "description": "The type of token (always \"Bearer\")"
                    },
                    "expires_in": {
                      "type": "integer",
                      "description": "Time in seconds until the token expires",
                      "example": 3600
                    },
                    "refresh_token": {
                      "type": "string",
                      "description": "Token that can be used to obtain a new access token (only returned for certain grant types)"
                    },
                    "scope": {
                      "type": "string",
                      "description": "Space-separated list of granted scopes",
                      "example": "read:profile write:orders"
                    }
                  }
                },
                "example": {
                  "access_token": "[ACCESS_TOKEN]",
                  "token_type": "Bearer",
                  "expires_in": 3600,
                  "refresh_token": "[REFRESH_TOKEN]",
                  "scope": "read:profile write:orders"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "invalid_request"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Required parameter is missing"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "invalid_client"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Client authentication failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/register": {
      "post": {
        "summary": "Register a new OAuth client",
        "description": "Creates a new API client for accessing the PenPals API.\nRequires client name and optional redirect URIs and allowed origins.\n",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Client name"
                  },
                  "description": {
                    "type": "string",
                    "description": "Client description"
                  },
                  "redirect_uris": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Authorized redirect URIs"
                  },
                  "allowed_origins": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Allowed CORS origins"
                  }
                }
              },
              "example": {
                "name": "MyIntegration App",
                "description": "Integration for order management",
                "redirect_uris": [
                  "https://myapp.com/callback",
                  "https://myapp.com/auth"
                ],
                "allowed_origins": [
                  "https://myapp.com"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Client created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "client_id": {
                      "type": "string",
                      "description": "The unique identifier for this client"
                    },
                    "client_secret": {
                      "type": "string",
                      "description": "The client secret (only shown once, store securely)"
                    },
                    "name": {
                      "type": "string",
                      "description": "The client name"
                    },
                    "description": {
                      "type": "string",
                      "description": "The client description"
                    },
                    "redirect_uris": {
                      "type": "array",
                      "description": "Authorized redirect URIs",
                      "items": {
                        "type": "string"
                      }
                    },
                    "allowed_origins": {
                      "type": "array",
                      "description": "Allowed CORS origins",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "example": {
                  "client_id": "client_123456",
                  "client_secret": "[CLIENT_SECRET]",
                  "name": "MyIntegration App",
                  "description": "Integration for order management",
                  "redirect_uris": [
                    "https://myapp.com/callback",
                    "https://myapp.com/auth"
                  ],
                  "allowed_origins": [
                    "https://myapp.com"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "error": "Invalid client name",
                  "code": "VALIDATION_ERROR"
                }
              }
            }
          },
          "429": {
            "description": "Too many registration attempts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "error": "Too many registration attempts, please try again later"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/revoke": {
      "post": {
        "summary": "Revoke an OAuth token",
        "description": "Invalidates a token, preventing it from being used again.\nThe token will be immediately rejected for all future API calls.\n",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The token to revoke"
                  },
                  "token_type_hint": {
                    "type": "string",
                    "enum": [
                      "access_token",
                      "refresh_token"
                    ],
                    "description": "Type of token being revoked"
                  }
                }
              },
              "example": {
                "token": "[TOKEN]",
                "token_type_hint": "access_token"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token revoked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates successful revocation"
                    }
                  }
                },
                "example": {
                  "success": true
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "error": "Invalid token",
                  "code": "TOKEN_ERROR"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/userinfo": {
      "get": {
        "summary": "Get authenticated user information",
        "description": "Returns information about the authenticated user based on the\nprovided access token. Used to verify token validity and retrieve\nbasic user profile information.\n",
        "tags": [
          "Auth"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "read:profile"
        ],
        "responses": {
          "200": {
            "description": "User information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates the request was successful",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "sub": {
                          "type": "string",
                          "description": "Subject identifier"
                        },
                        "email": {
                          "type": "string",
                          "description": "User's email address"
                        },
                        "has_payment_method": {
                          "type": "boolean",
                          "description": "Whether the user has a payment method on file"
                        },
                        "payment_method_summary": {
                          "type": "object",
                          "description": "Safe summary of default payment method (only if has_payment_method is true)",
                          "properties": {
                            "brand": {
                              "type": "string",
                              "description": "Card brand"
                            },
                            "last4": {
                              "type": "string",
                              "description": "Last 4 digits of the card"
                            },
                            "is_default": {
                              "type": "boolean",
                              "description": "Whether this is the default payment method"
                            }
                          }
                        },
                        "client_id": {
                          "type": "string",
                          "description": "Client ID that requested the token"
                        },
                        "scopes": {
                          "type": "array",
                          "description": "Scopes granted to this token",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "userWithName": {
                    "value": {
                      "success": true,
                      "data": {
                        "sub": "user_123456789",
                        "email": "john.smith@example.com",
                        "has_payment_method": true,
                        "payment_method_summary": {
                          "brand": "visa",
                          "last4": "4242",
                          "is_default": true
                        }
                      }
                    }
                  },
                  "clientCredentials": {
                    "value": {
                      "success": true,
                      "data": {
                        "sub": "user_987654321",
                        "client_id": "client_123456789",
                        "scopes": [
                          "read:profile",
                          "write:orders"
                        ],
                        "has_payment_method": false
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates the request failed",
                      "example": false
                    },
                    "error": {
                      "type": "object",
                      "properties": {
                        "message": {
                          "type": "string"
                        },
                        "code": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "success": false,
                  "error": {
                    "message": "Not authenticated",
                    "code": "UNAUTHORIZED"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/refresh": {
      "post": {
        "summary": "Refresh an access token",
        "description": "Simplified endpoint to obtain a new access token using a refresh token.\nThis is a convenience wrapper around the standard OAuth token endpoint\nwith the refresh_token grant type pre-configured.\n",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "refresh_token",
                  "client_id"
                ],
                "properties": {
                  "refresh_token": {
                    "type": "string",
                    "description": "The refresh token previously issued"
                  },
                  "client_id": {
                    "type": "string",
                    "description": "The client ID"
                  }
                }
              },
              "example": {
                "refresh_token": "[REFRESH_TOKEN]",
                "client_id": "client_123456"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "New access token issued successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string",
                      "description": "The new access token"
                    },
                    "token_type": {
                      "type": "string",
                      "description": "The type of token (always \"Bearer\")"
                    },
                    "expires_in": {
                      "type": "integer",
                      "description": "Time in seconds until the token expires",
                      "example": 3600
                    },
                    "refresh_token": {
                      "type": "string",
                      "description": "New refresh token (if rotating)"
                    },
                    "scope": {
                      "type": "string",
                      "description": "Space-separated list of granted scopes",
                      "example": "read:profile write:orders"
                    }
                  }
                },
                "example": {
                  "access_token": "[ACCESS_TOKEN]",
                  "token_type": "Bearer",
                  "expires_in": 3600,
                  "refresh_token": "[REFRESH_TOKEN]",
                  "scope": "read:profile write:orders"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "invalid_grant"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Invalid or expired refresh token"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "invalid_client"
                    },
                    "error_description": {
                      "type": "string",
                      "example": "Client authentication failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/payment-methods": {
      "get": {
        "summary": "Get user's payment method status",
        "description": "Returns the authenticated user's payment method status in a paginated format suitable for Zapier triggers.",
        "tags": [
          "Auth"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "read:profile"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "Payment method status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Unique identifier for the payment method status"
                      },
                      "user_id": {
                        "type": "string",
                        "description": "User ID"
                      },
                      "has_payment_method": {
                        "type": "boolean",
                        "description": "Whether the user has a payment method on file"
                      },
                      "payment_method_summary": {
                        "type": "object",
                        "description": "Safe summary of default payment method",
                        "properties": {
                          "brand": {
                            "type": "string",
                            "description": "Card brand"
                          },
                          "last4": {
                            "type": "string",
                            "description": "Last 4 digits of the card"
                          },
                          "is_default": {
                            "type": "boolean",
                            "description": "Whether this is the default payment method"
                          }
                        }
                      },
                      "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "When the payment method status was last updated"
                      }
                    }
                  }
                },
                "example": [
                  {
                    "id": "payment_method_status_123",
                    "user_id": "user_123456789",
                    "has_payment_method": true,
                    "payment_method_summary": {
                      "brand": "visa",
                      "last4": "4242",
                      "is_default": true
                    },
                    "updated_at": "2024-01-20T14:45:00Z"
                  }
                ]
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/api/v1/cart": {
      "post": {
        "summary": "Add item to cart",
        "description": "Creates a new item in the user's cart. Each item must reference a product and include either address IDs or complete address information for both recipient and return addresses.",
        "tags": [
          "Cart"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "write:cart"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "product_id",
                        "message"
                      ],
                      "properties": {
                        "product_id": {
                          "type": "string"
                        },
                        "recipient_address_id": {
                          "type": "string"
                        },
                        "recipient_first_name": {
                          "type": "string"
                        },
                        "recipient_last_name": {
                          "type": "string"
                        },
                        "recipient_business_name": {
                          "type": "string"
                        },
                        "recipient_address_line1": {
                          "type": "string"
                        },
                        "recipient_address_line2": {
                          "type": "string"
                        },
                        "recipient_city": {
                          "type": "string"
                        },
                        "recipient_state": {
                          "type": "string"
                        },
                        "recipient_zip": {
                          "type": "string"
                        },
                        "recipient_country": {
                          "type": "string"
                        },
                        "return_address_id": {
                          "type": "string"
                        },
                        "return_first_name": {
                          "type": "string"
                        },
                        "return_last_name": {
                          "type": "string"
                        },
                        "return_business_name": {
                          "type": "string"
                        },
                        "return_address_line1": {
                          "type": "string"
                        },
                        "return_address_line2": {
                          "type": "string"
                        },
                        "return_city": {
                          "type": "string"
                        },
                        "return_state": {
                          "type": "string"
                        },
                        "return_zip": {
                          "type": "string"
                        },
                        "return_country": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        },
                        "signature": {
                          "type": "string"
                        },
                        "font_id": {
                          "type": "integer"
                        },
                        "ink_color_id": {
                          "type": "integer"
                        },
                        "send_date": {
                          "type": "string",
                          "format": "date"
                        },
                        "extras_id": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "example": {
                "items": [
                  {
                    "product_id": "prod_12345",
                    "recipient_address_id": "addr_67890",
                    "return_address_id": "addr_54321",
                    "message": "Thank you for your business!",
                    "signature": "Best regards, John",
                    "font_id": 12,
                    "ink_color_id": 5,
                    "send_date": "2023-12-25"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Item added to cart successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cart"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "Get user's cart items",
        "description": "Retrieves all items currently in the user's cart with pagination.",
        "tags": [
          "Cart"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "read:cart"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of records to return (max 100)",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 20
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cart items retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/cart"
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer",
                          "example": 1
                        },
                        "limit": {
                          "type": "integer",
                          "example": 20
                        },
                        "total": {
                          "type": "integer",
                          "example": 35
                        },
                        "pages": {
                          "type": "integer",
                          "example": 2
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/api/v1/cart/{id}": {
      "get": {
        "summary": "Get a specific cart item",
        "description": "Retrieves a single cart item by its ID with all associated details.",
        "tags": [
          "Cart"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "read:cart"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the cart item to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cart item retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "$ref": "#/components/schemas/cart"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update a cart item",
        "description": "Updates an existing item in the user's cart. Only fields that are provided will be updated.",
        "tags": [
          "Cart"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "write:cart"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the cart item to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "product_id": {
                    "type": "string"
                  },
                  "recipient_address_id": {
                    "type": "string"
                  },
                  "return_address_id": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  },
                  "signature": {
                    "type": "string"
                  },
                  "font_id": {
                    "type": "integer"
                  },
                  "ink_color_id": {
                    "type": "integer"
                  },
                  "send_date": {
                    "type": "string",
                    "format": "date"
                  },
                  "extras_id": {
                    "type": "string"
                  }
                }
              },
              "example": {
                "message": "Updated message text",
                "signature": "With love, John",
                "font_id": 15
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cart item updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cart"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Remove a cart item",
        "description": "Deletes a specific item from the user's cart by its ID.",
        "tags": [
          "Cart"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "write:cart"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the cart item to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cart item deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/api/v1/cart/items": {
      "post": {
        "summary": "Get multiple cart items by ID",
        "description": "Retrieves multiple items from the user's cart based on their IDs.",
        "tags": [
          "Cart"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "read:cart"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "itemIds"
                ],
                "properties": {
                  "itemIds": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    },
                    "description": "Array of cart item IDs to retrieve"
                  }
                }
              },
              "example": {
                "itemIds": [
                  123,
                  124,
                  125
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cart items retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "product_id": {
                        "type": "string"
                      },
                      "recipient_address_id": {
                        "type": "string",
                        "nullable": true
                      },
                      "return_address_id": {
                        "type": "string",
                        "nullable": true
                      },
                      "message": {
                        "type": "string"
                      },
                      "signature": {
                        "type": "string",
                        "nullable": true
                      },
                      "font_id": {
                        "type": "integer",
                        "nullable": true
                      },
                      "ink_color_id": {
                        "type": "integer",
                        "nullable": true
                      },
                      "send_date": {
                        "type": "string",
                        "format": "date"
                      },
                      "price_each": {
                        "type": "number"
                      },
                      "extras_id": {
                        "type": "string",
                        "nullable": true
                      }
                    }
                  }
                },
                "example": [
                  {
                    "id": 123,
                    "product_id": "prod_12345",
                    "recipient_address_id": "addr_67890",
                    "message": "Thank you for your business!",
                    "send_date": "2023-12-25",
                    "price_each": 19.99
                  },
                  {
                    "id": 124,
                    "product_id": "prod_67890",
                    "recipient_address_id": "addr_12345",
                    "message": "Happy Holidays!",
                    "send_date": "2023-12-20",
                    "price_each": 24.99
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/api/v1/cart/bulk": {
      "patch": {
        "summary": "Update multiple cart items",
        "description": "Modifies multiple cart items in a single request. Each item must include its ID and the properties to be updated.",
        "tags": [
          "Cart"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "write:cart"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "id"
                      ],
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "product_id": {
                          "type": "string"
                        },
                        "recipient_address_id": {
                          "type": "string"
                        },
                        "return_address_id": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        },
                        "signature": {
                          "type": "string"
                        },
                        "font_id": {
                          "type": "integer"
                        },
                        "ink_color_id": {
                          "type": "integer"
                        },
                        "send_date": {
                          "type": "string",
                          "format": "date"
                        },
                        "extras_id": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "example": {
                "items": [
                  {
                    "id": 123,
                    "message": "Updated message for first card",
                    "font_id": 14
                  },
                  {
                    "id": 124,
                    "signature": "New signature",
                    "ink_color_id": 7,
                    "send_date": "2023-12-22"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cart items updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "product_id": {
                        "type": "string"
                      },
                      "message": {
                        "type": "string"
                      },
                      "signature": {
                        "type": "string"
                      },
                      "font_id": {
                        "type": "integer"
                      },
                      "ink_color_id": {
                        "type": "integer"
                      },
                      "send_date": {
                        "type": "string",
                        "format": "date"
                      },
                      "price_each": {
                        "type": "number"
                      },
                      "extras_id": {
                        "type": "string",
                        "nullable": true
                      }
                    }
                  }
                },
                "example": [
                  {
                    "id": 123,
                    "product_id": "prod_12345",
                    "message": "Updated message for first card",
                    "font_id": 14,
                    "send_date": "2023-12-25",
                    "price_each": 19.99
                  },
                  {
                    "id": 124,
                    "product_id": "prod_67890",
                    "signature": "New signature",
                    "ink_color_id": 7,
                    "send_date": "2023-12-22",
                    "price_each": 24.99
                  }
                ]
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete multiple cart items",
        "description": "Removes multiple items from the cart in a single request. Limited to 100 items per request.",
        "tags": [
          "Cart"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "write:cart"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "ids"
                ],
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1,
                    "maxItems": 100,
                    "description": "Array of cart item IDs to delete"
                  }
                }
              },
              "example": {
                "ids": [
                  "cart_123",
                  "cart_456"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cart items deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "deleted": {
                      "type": "integer",
                      "description": "Number of items deleted",
                      "example": 2
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/api/v1/cart/clear": {
      "delete": {
        "summary": "Clear the entire cart",
        "description": "Removes all items from the user's cart.",
        "tags": [
          "Cart"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "write:cart"
        ],
        "responses": {
          "200": {
            "description": "Cart cleared successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "success": {
                      "type": "boolean"
                    }
                  }
                },
                "example": {
                  "message": "Cart successfully cleared",
                  "success": true
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/api/v1/orders": {
      "get": {
        "summary": "Get all orders",
        "description": "Returns a paginated list of orders for the authenticated user. Can be filtered by status.",
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "read:orders"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "processing",
                "shipped",
                "delivered",
                "canceled"
              ]
            },
            "description": "Filter orders by status"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 10
            },
            "description": "Number of items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "List of orders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "orders": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "date": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "status": {
                            "type": "string"
                          },
                          "total": {
                            "type": "number"
                          },
                          "extras_total": {
                            "type": "number"
                          },
                          "items": {
                            "type": "integer"
                          },
                          "products": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "recipient": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string"
                                    },
                                    "business": {
                                      "type": "string",
                                      "nullable": true
                                    },
                                    "address": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "style": {
                                  "type": "object",
                                  "properties": {
                                    "font": {
                                      "type": "string"
                                    },
                                    "ink": {
                                      "type": "string"
                                    },
                                    "sendDate": {
                                      "type": "string",
                                      "format": "date",
                                      "nullable": true
                                    }
                                  }
                                },
                                "extras": {
                                  "type": "object",
                                  "nullable": true,
                                  "properties": {
                                    "id": {
                                      "type": "string"
                                    },
                                    "name": {
                                      "type": "string"
                                    },
                                    "price": {
                                      "type": "number"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer"
                        },
                        "page": {
                          "type": "integer"
                        },
                        "pages": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "orders": [
                    {
                      "id": "ord_123456",
                      "date": "2023-06-15T14:30:00Z",
                      "status": "complete",
                      "total": 59.97,
                      "extras_total": 10,
                      "items": 3,
                      "products": [
                        {
                          "name": "Thank You Card",
                          "recipient": {
                            "name": "John Doe",
                            "business": "Acme Corp",
                            "address": "123 Main St, San Francisco, CA 94105"
                          },
                          "style": {
                            "font": "Elegant Script",
                            "ink": "Blue",
                            "sendDate": "2023-06-20"
                          },
                          "extras": {
                            "id": "extra_123",
                            "name": "$10 Gift Card",
                            "price": 10
                          }
                        }
                      ]
                    },
                    {
                      "id": "ord_789012",
                      "date": "2023-06-10T09:15:00Z",
                      "status": "shipped",
                      "total": 24.99,
                      "extras_total": 0,
                      "items": 1
                    }
                  ],
                  "pagination": {
                    "total": 15,
                    "page": 1,
                    "pages": 2
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/api/v1/orders/{id}": {
      "get": {
        "summary": "Get a single order",
        "description": "Returns detailed information about a specific order, including all order items and recipient details.",
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "read:orders"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique order identifier (e.g., ord_123456)"
          }
        ],
        "responses": {
          "200": {
            "description": "Order details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "created_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updated_at": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "user_id": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "payment_status": {
                      "type": "string"
                    },
                    "subtotal": {
                      "type": "number"
                    },
                    "tax": {
                      "type": "number"
                    },
                    "postage_total": {
                      "type": "number"
                    },
                    "extras_total": {
                      "type": "number"
                    },
                    "order_total": {
                      "type": "number"
                    },
                    "order_items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "price_each": {
                            "type": "number"
                          },
                          "extras_id": {
                            "type": "string",
                            "nullable": true
                          },
                          "extras_price": {
                            "type": "number",
                            "nullable": true
                          },
                          "extras_name": {
                            "type": "string",
                            "nullable": true
                          },
                          "postage_each": {
                            "type": "number"
                          },
                          "status": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string",
                            "nullable": true
                          },
                          "signature": {
                            "type": "string",
                            "nullable": true
                          },
                          "send_date": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": true
                          },
                          "is_custom": {
                            "type": "boolean"
                          },
                          "front_image_url": {
                            "type": "string",
                            "nullable": true
                          },
                          "front_image_position": {
                            "type": "object",
                            "nullable": true
                          },
                          "recipient_first_name": {
                            "type": "string"
                          },
                          "recipient_last_name": {
                            "type": "string"
                          },
                          "recipient_business_name": {
                            "type": "string",
                            "nullable": true
                          },
                          "recipient_address_line1": {
                            "type": "string"
                          },
                          "recipient_address_line2": {
                            "type": "string",
                            "nullable": true
                          },
                          "recipient_city": {
                            "type": "string"
                          },
                          "recipient_state": {
                            "type": "string"
                          },
                          "recipient_zip": {
                            "type": "string"
                          },
                          "recipient_country": {
                            "type": "string"
                          },
                          "return_first_name": {
                            "type": "string"
                          },
                          "return_last_name": {
                            "type": "string"
                          },
                          "return_business_name": {
                            "type": "string",
                            "nullable": true
                          },
                          "return_address_line1": {
                            "type": "string"
                          },
                          "return_address_line2": {
                            "type": "string",
                            "nullable": true
                          },
                          "return_city": {
                            "type": "string"
                          },
                          "return_state": {
                            "type": "string"
                          },
                          "return_zip": {
                            "type": "string"
                          },
                          "return_country": {
                            "type": "string"
                          },
                          "back_header_id": {
                            "type": "string",
                            "nullable": true
                          },
                          "back_header_image_url": {
                            "type": "string",
                            "nullable": true
                          },
                          "back_header_image_position": {
                            "type": "object",
                            "nullable": true
                          },
                          "back_header_text_content": {
                            "type": "string",
                            "nullable": true
                          },
                          "back_header_text_style": {
                            "type": "object",
                            "nullable": true
                          },
                          "back_footer_id": {
                            "type": "string",
                            "nullable": true
                          },
                          "back_footer_image_url": {
                            "type": "string",
                            "nullable": true
                          },
                          "back_footer_image_position": {
                            "type": "object",
                            "nullable": true
                          },
                          "back_footer_text_content": {
                            "type": "string",
                            "nullable": true
                          },
                          "back_footer_text_style": {
                            "type": "object",
                            "nullable": true
                          },
                          "product": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              }
                            }
                          },
                          "font": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              }
                            }
                          },
                          "ink_color": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "id": "ord_123456",
                  "created_at": "2023-06-15T14:30:00Z",
                  "updated_at": "2023-06-15T14:30:00Z",
                  "user_id": "user_abc123",
                  "status": "delivered",
                  "payment_status": "paid",
                  "subtotal": 50.97,
                  "tax": 5,
                  "postage_total": 4,
                  "extras_total": 9.99,
                  "order_total": 59.97,
                  "order_items": [
                    {
                      "id": "item_123",
                      "price_each": 19.99,
                      "extras_id": "extra_123",
                      "extras_price": 10,
                      "extras_name": "$10 Gift Card",
                      "postage_each": 1.5,
                      "status": "complete",
                      "message": "Thank you for your business!",
                      "signature": "Best regards, Jane",
                      "send_date": "2023-06-20T12:00:00Z",
                      "is_custom": false,
                      "front_image_url": "https://example.com/card.jpg",
                      "recipient_first_name": "John",
                      "recipient_last_name": "Doe",
                      "recipient_business_name": "Acme Corp",
                      "recipient_address_line1": "123 Main St",
                      "recipient_address_line2": "Suite 405",
                      "recipient_city": "San Francisco",
                      "recipient_state": "CA",
                      "recipient_zip": "94105",
                      "recipient_country": "US",
                      "return_first_name": "Jane",
                      "return_last_name": "Smith",
                      "return_business_name": "ABC Inc",
                      "return_address_line1": "456 Market St",
                      "return_address_line2": null,
                      "return_city": "San Francisco",
                      "return_state": "CA",
                      "return_zip": "94105",
                      "return_country": "US",
                      "product": {
                        "id": "prod_456",
                        "name": "Thank You Card"
                      },
                      "font": {
                        "name": "Elegant Script"
                      },
                      "ink_color": {
                        "name": "Blue"
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/api/v1/orders/calculate": {
      "post": {
        "summary": "Calculate order totals",
        "description": "Calculates subtotal, extras, postage, tax, and total price for a set of items without creating an actual order. Used for showing order preview before checkout.",
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "read:orders"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "product_id",
                        "price_each"
                      ],
                      "properties": {
                        "product_id": {
                          "type": "string"
                        },
                        "price_each": {
                          "type": "number"
                        },
                        "extras_id": {
                          "type": "string"
                        },
                        "extras_price": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              },
              "example": {
                "items": [
                  {
                    "product_id": "prod_345678",
                    "price_each": 19.99
                  },
                  {
                    "product_id": "prod_345679",
                    "price_each": 24.99,
                    "extras_id": "extra_123",
                    "extras_price": 5.99
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order totals calculated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "subtotal": {
                      "type": "number"
                    },
                    "extras_total": {
                      "type": "number"
                    },
                    "postage_total": {
                      "type": "number"
                    },
                    "tax": {
                      "type": "number"
                    },
                    "order_total": {
                      "type": "number"
                    }
                  }
                },
                "example": {
                  "subtotal": 44.98,
                  "extras_total": 5.99,
                  "postage_total": 3.5,
                  "tax": 4.35,
                  "order_total": 58.82
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/api/v1/orders/create": {
      "post": {
        "summary": "Create a new order",
        "description": "Creates a new order with the specified items. Each item must reference a product and include either address IDs or complete address information for both recipient and return addresses. Requires a valid payment method on file.",
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "write:orders"
        ],
        "parameters": [
          {
            "name": "Idempotency-Key",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A unique key to prevent duplicate order creation. Must be a valid UUID."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "items"
                ],
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "required": [
                        "product_id"
                      ],
                      "properties": {
                        "product_id": {
                          "type": "string",
                          "description": "ID of the product to order"
                        },
                        "recipient_address_id": {
                          "type": "string",
                          "description": "ID of the recipient's address"
                        },
                        "recipient_first_name": {
                          "type": "string",
                          "description": "First name of recipient (if not using recipient_address_id)"
                        },
                        "recipient_last_name": {
                          "type": "string",
                          "description": "Last name of recipient (if not using recipient_address_id)"
                        },
                        "recipient_business_name": {
                          "type": "string",
                          "description": "Business name of recipient (optional)"
                        },
                        "recipient_address_line1": {
                          "type": "string",
                          "description": "Address line 1 of recipient (if not using recipient_address_id)"
                        },
                        "recipient_address_line2": {
                          "type": "string",
                          "description": "Address line 2 of recipient (optional)"
                        },
                        "recipient_city": {
                          "type": "string",
                          "description": "City of recipient (if not using recipient_address_id)"
                        },
                        "recipient_state": {
                          "type": "string",
                          "description": "State of recipient (if not using recipient_address_id)"
                        },
                        "recipient_zip": {
                          "type": "string",
                          "description": "ZIP code of recipient (if not using recipient_address_id)"
                        },
                        "recipient_country": {
                          "type": "string",
                          "description": "Country of recipient (if not using recipient_address_id)"
                        },
                        "return_address_id": {
                          "type": "string",
                          "description": "ID of the return address"
                        },
                        "return_first_name": {
                          "type": "string",
                          "description": "First name for return address (if not using return_address_id)"
                        },
                        "return_last_name": {
                          "type": "string",
                          "description": "Last name for return address (if not using return_address_id)"
                        },
                        "return_business_name": {
                          "type": "string",
                          "description": "Business name for return address (optional)"
                        },
                        "return_address_line1": {
                          "type": "string",
                          "description": "Address line 1 for return address (if not using return_address_id)"
                        },
                        "return_address_line2": {
                          "type": "string",
                          "description": "Address line 2 for return address (optional)"
                        },
                        "return_city": {
                          "type": "string",
                          "description": "City for return address (if not using return_address_id)"
                        },
                        "return_state": {
                          "type": "string",
                          "description": "State for return address (if not using return_address_id)"
                        },
                        "return_zip": {
                          "type": "string",
                          "description": "ZIP code for return address (if not using return_address_id)"
                        },
                        "return_country": {
                          "type": "string",
                          "description": "Country for return address (if not using return_address_id)"
                        },
                        "message": {
                          "type": "string",
                          "description": "Custom message to include"
                        },
                        "signature": {
                          "type": "string",
                          "description": "Signature line text"
                        },
                        "font_id": {
                          "type": "string",
                          "description": "ID of the font to use"
                        },
                        "ink_color_id": {
                          "type": "string",
                          "description": "ID of the ink color"
                        },
                        "send_date": {
                          "type": "string",
                          "format": "date",
                          "description": "When to send the card"
                        },
                        "payment_method": {
                          "type": "boolean",
                          "nullable": true,
                          "description": "Whether to process payment (true) or add to cart only (false/null)",
                          "default": true
                        }
                      }
                    }
                  }
                }
              },
              "example": {
                "items": [
                  {
                    "product_id": "prod_345678",
                    "recipient_address_id": "addr_123456",
                    "return_address_id": "ret_123456",
                    "message": "Thank you for your business!",
                    "signature": "Best regards, Jane",
                    "font_id": "font_12345",
                    "ink_color_id": "ink_6789",
                    "send_date": "2023-07-15"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "total": {
                      "type": "number"
                    },
                    "date": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "402": {
            "description": "Payment failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "payment_failed"
                    },
                    "message": {
                      "type": "string",
                      "example": "Your payment could not be processed"
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "decline_code": "insufficient_funds"
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Order already exists with this reference ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Duplicate order reference"
                    },
                    "code": {
                      "type": "string",
                      "example": "DUPLICATE_ERROR"
                    },
                    "details": {
                      "type": "object",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/orders/concierge": {
      "post": {
        "summary": "Creates orders from natural language",
        "description": "Interprets requests and places orders directly. Selects appropriate card, generates\nmessage, and sends the order to the specified recipient. Requires a valid payment method on file.\n",
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "write:orders"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "prompt",
                  "recipient",
                  "return_address"
                ],
                "properties": {
                  "prompt": {
                    "type": "string",
                    "minLength": 10,
                    "maxLength": 1000,
                    "description": "Description of what you want to send",
                    "example": "Send a birthday card to my mom Sarah saying happy birthday and that I'm thinking of her"
                  },
                  "payment_method": {
                    "type": "boolean",
                    "nullable": true,
                    "description": "Whether to process payment (true) or add to cart only (false/null)",
                    "default": true
                  },
                  "recipient": {
                    "type": "object",
                    "description": "Structured recipient info to supplement the prompt",
                    "properties": {
                      "first_name": {
                        "type": "string"
                      },
                      "last_name": {
                        "type": "string"
                      },
                      "business_name": {
                        "type": "string"
                      },
                      "address_line1": {
                        "type": "string"
                      },
                      "address_line2": {
                        "type": "string"
                      },
                      "city": {
                        "type": "string"
                      },
                      "state": {
                        "type": "string"
                      },
                      "zip": {
                        "type": "string"
                      },
                      "country": {
                        "type": "string"
                      }
                    }
                  },
                  "return_address": {
                    "type": "object",
                    "description": "Structured return address to supplement the prompt",
                    "properties": {
                      "first_name": {
                        "type": "string"
                      },
                      "last_name": {
                        "type": "string"
                      },
                      "business_name": {
                        "type": "string"
                      },
                      "address_line1": {
                        "type": "string"
                      },
                      "address_line2": {
                        "type": "string"
                      },
                      "city": {
                        "type": "string"
                      },
                      "state": {
                        "type": "string"
                      },
                      "zip": {
                        "type": "string"
                      },
                      "country": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "examples": {
                "cart": {
                  "summary": "Add card to user's cart",
                  "value": {
                    "prompt": "Send a birthday card to my mom saying happy birthday and that I miss her",
                    "payment_method": false,
                    "recipient": {
                      "first_name": "Sarah",
                      "last_name": "Smith",
                      "address_line1": "123 Main St",
                      "city": "Boston",
                      "state": "MA",
                      "zip": "02101"
                    },
                    "return_address": {
                      "first_name": "John",
                      "last_name": "Smith",
                      "address_line1": "100 Second St",
                      "city": "Boston",
                      "state": "MA",
                      "zip": "02103"
                    }
                  }
                },
                "order": {
                  "summary": "Place order",
                  "value": {
                    "prompt": "Send a thank you card to John Smith thanking him for the business meeting",
                    "payment_method": true,
                    "recipient": {
                      "first_name": "John",
                      "last_name": "Smith",
                      "address_line1": "100 Second St",
                      "city": "Boston",
                      "state": "MA",
                      "zip": "02101"
                    },
                    "return_address": {
                      "first_name": "Sarah",
                      "last_name": "Smith",
                      "address_line1": "123 Main St",
                      "city": "Boston",
                      "state": "MA",
                      "zip": "02101"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully processed request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "description": "Response when payment_method is false/null",
                      "properties": {
                        "success": {
                          "type": "boolean"
                        },
                        "cart_item": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "product": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                }
                              }
                            },
                            "message": {
                              "type": "string"
                            },
                            "signature": {
                              "type": "string"
                            },
                            "price_each": {
                              "type": "number"
                            }
                          }
                        },
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "card_name": {
                              "type": "string"
                            },
                            "category": {
                              "type": "string"
                            },
                            "performance_ms": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Response when payment_method is true",
                      "properties": {
                        "success": {
                          "type": "boolean"
                        },
                        "order": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "status": {
                              "type": "string"
                            },
                            "total": {
                              "type": "number"
                            },
                            "date": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        },
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "card_name": {
                              "type": "string"
                            },
                            "message": {
                              "type": "string"
                            },
                            "performance_ms": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "cart_success": {
                    "summary": "Successfully added to cart",
                    "value": {
                      "success": true,
                      "cart_item": {
                        "id": "cart_item_123",
                        "product": {
                          "id": "prod_456",
                          "name": "Birthday Celebration Card"
                        },
                        "message": "Happy birthday! I hope your special day is wonderful and filled with joy.",
                        "signature": "Love",
                        "price_each": 19.99
                      },
                      "metadata": {
                        "card_name": "Birthday Celebration Card",
                        "category": "birthday",
                        "performance_ms": 1250
                      }
                    }
                  },
                  "order_success": {
                    "summary": "Successfully placed order",
                    "value": {
                      "success": true,
                      "order": {
                        "id": "ord_789",
                        "status": "processing",
                        "total": 23.49,
                        "date": "2023-07-15T14:30:00Z"
                      },
                      "metadata": {
                        "card_name": "Professional Thank You Card",
                        "message": "Thank you for taking the time to meet with us. We appreciate your insights.",
                        "performance_ms": 1100
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or AI processing error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "error": {
                      "type": "string",
                      "example": "insufficient_information"
                    },
                    "message": {
                      "type": "string",
                      "example": "I need more information to create the perfect card"
                    },
                    "suggestions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "What's the occasion?",
                        "Who is this card for?"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Too many requests, please try again later"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/products/categories": {
      "get": {
        "summary": "Get all product categories",
        "description": "Returns a list of all available product categories in the system.",
        "tags": [
          "Products"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "read:products"
        ],
        "responses": {
          "200": {
            "description": "List of product categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
                  "Birthday",
                  "Thank You"
                ]
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/api/v1/products/extras": {
      "get": {
        "summary": "Get all product extras",
        "description": "Returns a list of all available product add-ons or extras that can be included with an order.",
        "tags": [
          "Products"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "read:products"
        ],
        "responses": {
          "200": {
            "description": "List of product extras",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "price": {
                        "type": "number"
                      },
                      "sku": {
                        "type": "string"
                      }
                    }
                  }
                },
                "example": [
                  {
                    "id": "prod_extra_123",
                    "name": "$10 Gift Card",
                    "description": "A $10 gift card",
                    "price": 10,
                    "sku": 1001
                  }
                ]
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/api/v1/products": {
      "get": {
        "summary": "Get all products",
        "description": "Returns a list of products. Can be filtered by category and search terms. Custom products are only returned if they belong to the authenticated user. Supports field filtering and sorting.",
        "tags": [
          "Products"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "read:products"
        ],
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Filter products by category"
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Search term for products"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Page number for pagination (1-based)"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Maximum number of records to return"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Maximum number of records to return"
          },
          {
            "name": "order",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "updated_at",
                "name",
                "price"
              ]
            },
            "description": "Field to sort by (default is updated_at for newest items first)"
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "description": "Sort direction (default is desc for newest first)"
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of fields to return (e.g., \"id,name,price,updated_at\")"
          }
        ],
        "responses": {
          "200": {
            "description": "List of products (standard products + any available custom products)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "products": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/product"
                      }
                    },
                    "total": {
                      "type": "integer"
                    },
                    "pages": {
                      "type": "integer"
                    },
                    "page": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    }
                  }
                },
                "example": {
                  "products": [
                    {
                      "id": "prod_123abc",
                      "name": "Classic Thank You",
                      "description": "Classic thank you card",
                      "price": 2.99,
                      "category": "Thank You",
                      "image_url": "https://assets.xyz.com/products/thank-you-card.jpg",
                      "is_custom": false,
                      "created_at": "2024-01-15T10:30:00Z",
                      "updated_at": "2024-01-20T14:45:00Z"
                    }
                  ],
                  "total": 48,
                  "page": 1,
                  "limit": 20,
                  "pages": 3
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/api/v1/products/{id}": {
      "get": {
        "summary": "Get a single product",
        "description": "Returns detailed information about a specific product by its ID.",
        "tags": [
          "Products"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "read:products"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique product identifier"
          },
          {
            "name": "fields",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of fields to return (e.g., \"id,name,price,updated_at\")"
          }
        ],
        "responses": {
          "200": {
            "description": "Product details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/product"
                },
                "example": {
                  "id": "prod_123abc",
                  "name": "Classic Thank You",
                  "description": "Classic thank you card",
                  "price": 2.99,
                  "category": "Thank You",
                  "image_url": "https://assets.xyz.com/products/thank-you-card.jpg",
                  "is_custom": false,
                  "created_at": "2024-01-15T10:30:00Z",
                  "updated_at": "2024-01-20T14:45:00Z"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Access denied - product belongs to another user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "error": "Access denied"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/api/v1/return-addresses": {
      "post": {
        "summary": "Create a new return address",
        "description": "Create a new return address. Return addresses represent the sender's mailing address.",
        "tags": [
          "Return Addresses"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "write:addresses"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "first_name",
                  "last_name",
                  "address_line1",
                  "city",
                  "state",
                  "zip"
                ],
                "properties": {
                  "first_name": {
                    "type": "string"
                  },
                  "last_name": {
                    "type": "string"
                  },
                  "business_name": {
                    "type": "string",
                    "nullable": true
                  },
                  "address_line1": {
                    "type": "string"
                  },
                  "address_line2": {
                    "type": "string",
                    "nullable": true
                  },
                  "city": {
                    "type": "string"
                  },
                  "state": {
                    "type": "string"
                  },
                  "zip": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string",
                    "default": "US"
                  },
                  "label": {
                    "type": "string",
                    "nullable": true
                  },
                  "is_default": {
                    "type": "boolean",
                    "default": false
                  }
                }
              },
              "example": {
                "first_name": "John",
                "last_name": "Doe",
                "business_name": "ACME Corp",
                "address_line1": "123 Main St",
                "address_line2": "Suite 405",
                "city": "San Francisco",
                "state": "CA",
                "zip": "94105",
                "country": "US",
                "label": "Primary Office",
                "is_default": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Return address created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Unique identifier for the newly created return address"
                        },
                        "message": {
                          "type": "string",
                          "description": "Success message"
                        }
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "version": {
                          "type": "string"
                        },
                        "request_id": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "ret_12345abcde",
                    "message": "Return address created successfully"
                  },
                  "metadata": {
                    "timestamp": "2023-04-01T12:00:00Z",
                    "version": "v1",
                    "request_id": "req_abc123"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "Get all return addresses",
        "description": "Retrieve a list of all return addresses for the authenticated user",
        "tags": [
          "Return Addresses"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "read:addresses"
        ],
        "responses": {
          "200": {
            "description": "List of return addresses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/address"
                  }
                },
                "example": [
                  {
                    "id": "ret_12345abcde",
                    "first_name": "John",
                    "last_name": "Doe",
                    "business_name": "ACME Corp",
                    "address_line1": "123 Main St",
                    "address_line2": "Suite 405",
                    "city": "San Francisco",
                    "state": "CA",
                    "zip": "94105",
                    "country": "US",
                    "label": "Primary Office",
                    "is_default": true
                  },
                  {
                    "id": "ret_67890fghij",
                    "first_name": "Jane",
                    "last_name": "Smith",
                    "address_line1": "456 Market St",
                    "city": "New York",
                    "state": "NY",
                    "zip": "10001",
                    "country": "US",
                    "label": "East Coast Office",
                    "is_default": false
                  }
                ]
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/api/v1/return-addresses/{id}": {
      "get": {
        "summary": "Get a single return address",
        "description": "Retrieve a specific return address by its ID",
        "tags": [
          "Return Addresses"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "read:addresses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique return address identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Return address details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/address"
                },
                "example": {
                  "id": "ret_12345abcde",
                  "first_name": "John",
                  "last_name": "Doe",
                  "business_name": "ACME Corp",
                  "address_line1": "123 Main St",
                  "address_line2": "Suite 405",
                  "city": "San Francisco",
                  "state": "CA",
                  "zip": "94105",
                  "country": "US",
                  "label": "Primary Office",
                  "is_default": true
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update a return address",
        "description": "Update a specific return address. Note that when updating address fields (address_line1, city, state, zip) all fields must be provided together. Similarly, when updating name fields, both first_name and last_name must be provided.",
        "tags": [
          "Return Addresses"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "write:addresses"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique return address identifier"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "minProperties": 1,
                "properties": {
                  "first_name": {
                    "type": "string"
                  },
                  "last_name": {
                    "type": "string"
                  },
                  "business_name": {
                    "type": "string",
                    "nullable": true
                  },
                  "address_line1": {
                    "type": "string"
                  },
                  "address_line2": {
                    "type": "string",
                    "nullable": true
                  },
                  "city": {
                    "type": "string"
                  },
                  "state": {
                    "type": "string"
                  },
                  "zip": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string",
                    "nullable": true
                  },
                  "label": {
                    "type": "string",
                    "nullable": true
                  },
                  "is_default": {
                    "type": "boolean"
                  }
                }
              },
              "example": {
                "first_name": "Jonathan",
                "last_name": "Doe",
                "business_name": "ACME Corporation",
                "is_default": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return address updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Unique identifier of the updated return address"
                        },
                        "message": {
                          "type": "string",
                          "description": "Success message"
                        }
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "version": {
                          "type": "string"
                        },
                        "request_id": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "ret_12345abcde",
                    "message": "Return address updated successfully"
                  },
                  "metadata": {
                    "timestamp": "2023-04-01T12:00:00Z",
                    "version": "v1",
                    "request_id": "req_abc123"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete a return address",
        "description": "Permanently delete a return address. This action cannot be undone.",
        "tags": [
          "Return Addresses"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "write:addresses"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique return address identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Return address deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "example": true
                        },
                        "message": {
                          "type": "string",
                          "description": "Success message"
                        }
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "version": {
                          "type": "string"
                        },
                        "request_id": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "success": true,
                  "data": {
                    "success": true,
                    "message": "Return address deleted successfully"
                  },
                  "metadata": {
                    "timestamp": "2023-04-01T12:00:00Z",
                    "version": "v1",
                    "request_id": "req_abc123"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Cannot delete the only return address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "error": "Cannot delete the only return address",
                  "code": "CANNOT_DELETE_ONLY_RETURN_ADDRESS",
                  "status": 400
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Return address not found"
          }
        }
      }
    },
    "/api/v1/templates/fonts": {
      "get": {
        "summary": "Get all available fonts",
        "description": "Returns a list of fonts that can be used in templates for handwritten messages.",
        "tags": [
          "Templates"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "read:templates"
        ],
        "responses": {
          "200": {
            "description": "List of available fonts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "name": {
                        "type": "string"
                      },
                      "url": {
                        "type": "string"
                      }
                    }
                  }
                },
                "example": [
                  {
                    "id": 1,
                    "name": "Casual Script",
                    "url": "https://assets.xyz.com/fonts/casual-script.woff2"
                  },
                  {
                    "id": 2,
                    "name": "Elegant Cursive",
                    "url": "https://assets.xyz.com/fonts/elegant-cursive.woff2"
                  }
                ]
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/api/v1/templates/ink-colors": {
      "get": {
        "summary": "Get all available ink colors",
        "description": "Returns a list of ink colors that can be used in templates for handwritten messages.",
        "tags": [
          "Templates"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "read:templates"
        ],
        "responses": {
          "200": {
            "description": "List of available ink colors",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "name": {
                        "type": "string"
                      },
                      "hex_code": {
                        "type": "string"
                      }
                    }
                  }
                },
                "example": [
                  {
                    "id": 1,
                    "name": "Classic Blue",
                    "hex_code": "#0000FF"
                  },
                  {
                    "id": 2,
                    "name": "Rich Black",
                    "hex_code": "#000000"
                  }
                ]
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/api/v1/templates": {
      "post": {
        "summary": "Create a template",
        "description": "Create a new message template",
        "tags": [
          "Templates"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "write:templates"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "message"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "maxLength": 100
                  },
                  "message": {
                    "type": "string",
                    "maxLength": 500
                  },
                  "signature": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 50
                  },
                  "font_id": {
                    "type": "integer",
                    "description": "Optional. Defaults to 2 if not provided"
                  },
                  "ink_color_id": {
                    "type": "integer",
                    "description": "Optional. Defaults to 1 if not provided"
                  }
                }
              },
              "example": {
                "name": "Thank You Note",
                "message": "Thank you for your business. We truly appreciate your support.",
                "signature": "Best regards"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Template created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Unique identifier for the newly created template"
                        },
                        "message": {
                          "type": "string",
                          "description": "Success message"
                        }
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "version": {
                          "type": "string"
                        },
                        "request_id": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "tmpl_12345abcde",
                    "message": "Template created successfully"
                  },
                  "metadata": {
                    "timestamp": "2023-04-01T12:00:00Z",
                    "version": "v1",
                    "request_id": "req_abc123"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "get": {
        "summary": "Get all templates",
        "description": "Returns a list of all message templates for the authenticated user.",
        "tags": [
          "Templates"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "read:templates"
        ],
        "responses": {
          "200": {
            "description": "List of templates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          },
                          "signature": {
                            "type": "string",
                            "nullable": true
                          },
                          "font_id": {
                            "type": "integer"
                          },
                          "ink_color_id": {
                            "type": "integer"
                          },
                          "font": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer"
                              },
                              "name": {
                                "type": "string"
                              }
                            }
                          },
                          "ink_color": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer"
                              },
                              "name": {
                                "type": "string"
                              },
                              "hex_code": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer",
                          "example": 1
                        },
                        "limit": {
                          "type": "integer",
                          "example": 20
                        },
                        "total": {
                          "type": "integer",
                          "example": 35
                        },
                        "pages": {
                          "type": "integer",
                          "example": 2
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/api/v1/templates/{id}": {
      "get": {
        "summary": "Get a single template",
        "description": "Retrieve a specific template by its ID",
        "tags": [
          "Templates"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "read:templates"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique template identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Template details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "signature": {
                      "type": "string",
                      "nullable": true
                    },
                    "font_id": {
                      "type": "integer"
                    },
                    "ink_color_id": {
                      "type": "integer"
                    },
                    "font": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "url": {
                          "type": "string"
                        }
                      }
                    },
                    "ink_color": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "hex_code": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "id": "tmpl_12345abcde",
                  "name": "Thank You Note",
                  "message": "Thank you for your recent purchase. We appreciate your business and look forward to serving you again.",
                  "signature": "Best regards",
                  "font_id": 1,
                  "ink_color_id": 2,
                  "font": {
                    "id": 1,
                    "name": "Casual Script",
                    "url": "https://assets.xyz.com/fonts/casual-script.woff2"
                  },
                  "ink_color": {
                    "id": 2,
                    "name": "Rich Black",
                    "hex_code": "#000000"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "patch": {
        "summary": "Update a template",
        "description": "Update an existing template's properties",
        "tags": [
          "Templates"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "write:templates"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Template ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "maxLength": 100
                  },
                  "message": {
                    "type": "string",
                    "maxLength": 500
                  },
                  "signature": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 50
                  },
                  "font_id": {
                    "type": "integer",
                    "nullable": true,
                    "description": "If explicitly provided as null/undefined, will default to 1"
                  },
                  "ink_color_id": {
                    "type": "integer",
                    "nullable": true,
                    "description": "If explicitly provided as null/undefined, will default to 1"
                  }
                },
                "minProperties": 1
              },
              "example": {
                "name": "Updated Thank You Note",
                "message": "Thank you for your business. We truly appreciate your support."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Template updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Unique identifier for the updated template"
                        },
                        "message": {
                          "type": "string",
                          "description": "Success message"
                        }
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "version": {
                          "type": "string"
                        },
                        "request_id": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "success": true,
                  "data": {
                    "id": "tmpl_12345abcde",
                    "message": "Template updated successfully"
                  },
                  "metadata": {
                    "timestamp": "2023-04-01T12:00:00Z",
                    "version": "v1",
                    "request_id": "req_abc123"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "summary": "Delete a template",
        "description": "Permanently delete a message template. This action cannot be undone.",
        "tags": [
          "Templates"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "x-required-scopes": [
          "write:templates"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Unique template identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Template deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "success": {
                          "type": "boolean",
                          "example": true
                        },
                        "message": {
                          "type": "string",
                          "description": "Success message"
                        }
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "timestamp": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "version": {
                          "type": "string"
                        },
                        "request_id": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "success": true,
                  "data": {
                    "success": true,
                    "message": "Template deleted successfully"
                  },
                  "metadata": {
                    "timestamp": "2023-04-01T12:00:00Z",
                    "version": "v1",
                    "request_id": "req_abc123"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Template not found"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Addresses",
      "description": "Manage recipient addresses"
    },
    {
      "name": "Auth",
      "description": "OAuth 2.0 authentication flows"
    },
    {
      "name": "Cart",
      "description": "Manage cart functionality"
    },
    {
      "name": "Orders",
      "description": "Place & manage orders"
    },
    {
      "name": "Products",
      "description": "View products"
    },
    {
      "name": "Return Addresses",
      "description": "Manage return (sender) addresses"
    },
    {
      "name": "Templates",
      "description": "Manage message templates"
    }
  ]
}